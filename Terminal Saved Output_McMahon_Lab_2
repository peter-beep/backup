Last login: Wed Apr  1 11:04:11 on console
Petes-MacBook-Pro:~ peterigas$ python
Python 2.7.10 (default, Oct  6 2017, 22:29:07) 
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> sample_array = { }
>>> sample_array[1]=[1;2;3]
  File "<stdin>", line 1
    sample_array[1]=[1;2;3]
                      ^
SyntaxError: invalid syntax
>>> sample_array[1]=[1 2 3]
  File "<stdin>", line 1
    sample_array[1]=[1 2 3]
                       ^
SyntaxError: invalid syntax
>>> import numpy as np
>>> sample_array[1]=np.array([1 2 3 ])
  File "<stdin>", line 1
    sample_array[1]=np.array([1 2 3 ])
                                ^
SyntaxError: invalid syntax
>>> delta_array = np.linspace(0.05 , 0.7, 4)
>>> for Y in delta_array:
...     print(Y)
... 
0.05
0.266666666667
0.483333333333
0.7
>>> delta_array[1]
0.26666666666666666
>>> delta_array[0]
0.050000000000000003
>>> 
  [Restored Apr 12, 2020 at 12:59:04 PM]
Last login: Sun Apr 12 12:58:58 on console
Restored session: Sun Apr 12 12:57:38 EDT 2020
Petes-MacBook-Pro:~ peterigas$ python
Python 2.7.10 (default, Oct  6 2017, 22:29:07) 
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> delta_array = np.linspace(0.05,0.7,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'np' is not defined
>>> import numpy as np
>>> delta_array = np.linspace(0.05,0.7,4)
>>> delta_array.remove(delta_array[1])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'numpy.ndarray' object has no attribute 'remove'
>>> delta_array
array([ 0.05      ,  0.26666667,  0.48333333,  0.7       ])
>>> delta_array[2:len(delta_array)]
array([ 0.48333333,  0.7       ])
>>> delta_array[0]
0.050000000000000003
>>> delta_array[1:len(delta_array)]
array([ 0.26666667,  0.48333333,  0.7       ])
>>> for II in len(delta_array):
...     print(II)
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not iterable
>>> len(delta_array)
4
>>> for II in range(len(delta_array)):
...     print(II)
... 
0
1
2
3
>>> import numpy 
>>> # from matplotlib import pyplot as plt
... import matplotlib.pyplot as plt
>>> import numpy as np
>>> def brownian(x0, n, dt, delta, out=None):
...     x0 = np.asarray(x0)
...     r = norm.rvs(size=x0.shape + (n,), scale=delta*sqrt(dt))
...             if out is None:
  File "<stdin>", line 4
    if out is None:
    ^
IndentationError: unexpected indent
>>> def brownian(x0, n, dt, delta, out=None):
...     x0 = np.asarray(x0)
...      r = norm.rvs(size=x0.shape + (n,), scale=delta*sqrt(dt))
  File "<stdin>", line 3
    r = norm.rvs(size=x0.shape + (n,), scale=delta*sqrt(dt))
    ^
IndentationError: unexpected indent
>>> def brownian(x0, n, dt, delta, out=None):
...     x0 = np.asarray(x0)
...     r = norm.rvs(size=x0.shape + (n,), scale=delta*sqrt(dt))
...     if out is None:
...             out = np.empty(r.shape)
...     np.cumsum(r, axis=-1, out=out)
...     out += np.expand_dims(x0, axis=-1)
...     return out
... 
>>> Z = brownian(x[:,0], N, dt, 0.05, out=x[:,1:])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'x' is not defined
>>> x = np.empty((2,N+1))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'N' is not defined
>>> T = 10.0
>>> # Number of steps.
... N = 50
>>> # Time step size
... dt = T/N
>>> x = np.empty((2,N+1))
>>> x[:, 0] = Count_array[X-1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Count_array' is not defined
>>>         
...                 
>>> Count_array = np.linspace(1,5,5)
>>> x = np.empty((2,N+1))
>>>                 # declare initial value of the
...                 # Brownian sampling process.
... 
>>>                 # x0 = np.asarray(Count_array[X])
...                 x[:, 0] = Count_array[X-1]
  File "<stdin>", line 2
    x[:, 0] = Count_array[X-1]
    ^
IndentationError: unexpected indent
>>> x = np.empty((2,N+1))
>>> x[:, 0] = Count_array[X-1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'X' is not defined
>>> for X in Count_array:
...     x = np.empty((2,N+1))
...     x[:, 0] = Count_array[X-1]
...     Z = brownian(x[:,0], N, dt, 0.05, out=x[:,1:])
...     return Z
... 
  File "<stdin>", line 5
SyntaxError: 'return' outside function
>>> for X in Count_array:
...     x = np.empty((2,N+1))
...     x[:, 0] = Count_array[X-1]
...     Z = brownian(x[:,0], N, dt, 0.05, out=x[:,1:])
... 
Traceback (most recent call last):
  File "<stdin>", line 4, in <module>
  File "<stdin>", line 3, in brownian
NameError: global name 'norm' is not defined
>>> from math import sqrt
>>> from scipy.stats import norm
>>> import numpy as np
>>> np.set_printoptions(threshold=sys.maxsize)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sys' is not defined
>>> # import array as arr
... 
>>> # from matplotlib import pyplot as plt
... import matplotlib.pyplot as plt
>>> plt.rcParams.update({'figure.max_open_warning': 0})
>>> def brownian(x0, n, dt, delta, out=None):
...     x0 = np.asarray(x0)
...     r = norm.rvs(size=x0.shape + (n,), scale=delta*sqrt(dt))
...     if out is None:
...             out = np.empty(r.shape)
...      np.cumsum(r, axis=-1, out=out)
  File "<stdin>", line 6
    np.cumsum(r, axis=-1, out=out)
                                 ^
IndentationError: unindent does not match any outer indentation level
>>> def brownian(x0, n, dt, delta, out=None):
...     x0 = np.asarray(x0)
...     r = norm.rvs(size=x0.shape + (n,), scale=delta*sqrt(dt))
...     if out is None:
...             out = np.empty(r.shape)
...      np.cumsum(r, axis=-1, out=out)
  File "<stdin>", line 6
    np.cumsum(r, axis=-1, out=out)
                                 ^
IndentationError: unindent does not match any outer indentation level
>>> def brownian(x0, n, dt, delta, out=None):
...     x0 = np.asarray(x0)
...     r = norm.rvs(size=x0.shape + (n,), scale=delta*sqrt(dt))
...     if out is None:
...             out = np.empty(r.shape)
...     np.cumsum(r, axis=-1, out=out)
...     out += np.expand_dims(x0, axis=-1)
...     return out
... 
>>> # Total time.
... T = 10.0
>>> # Number of steps.
... N = 50
>>> # Time step size
... dt = T/N
>>> Z_1 = brownian(x[:,0],N,dt,0.05,out=x[:,1:])
>>> Z_1
array([[ 1.00278602,  0.97816627,  0.9766904 ,  0.98516553,  0.99771497,
         1.009491  ,  1.01178406,  0.99546658,  1.00669668,  0.99968632,
         1.01412999,  1.06284197,  1.04046288,  1.02874241,  0.98045819,
         0.97861695,  1.00117316,  0.95596761,  0.98886965,  0.98265011,
         0.99338403,  0.94532344,  0.94486613,  0.93028372,  0.92260236,
         0.91937567,  0.93812412,  0.91189934,  0.92921595,  0.91255795,
         0.90805823,  0.88742181,  0.94222933,  0.923271  ,  0.92138576,
         0.89943194,  0.87194123,  0.87377264,  0.84982528,  0.84046062,
         0.87558322,  0.86795212,  0.85941802,  0.87300188,  0.87053926,
         0.86604897,  0.87330098,  0.89902029,  0.896826  ,  0.95202094],
       [ 0.98043781,  0.96488296,  0.94823406,  0.93113454,  0.94240955,
         0.99095701,  0.97903544,  0.97403375,  1.01459929,  1.00957428,
         0.99964194,  1.01619353,  1.01337534,  0.96854521,  1.00016849,
         0.99837544,  0.98720362,  0.99417689,  1.00717319,  1.00283941,
         1.00509309,  1.0382798 ,  1.05283655,  1.0156283 ,  1.0602152 ,
         1.06677981,  1.09805228,  1.08363232,  1.08299067,  1.08199715,
         1.04210786,  1.05528426,  1.01224669,  1.00735626,  1.03747582,
         1.06917931,  1.04311799,  1.04956147,  1.01550728,  1.0413582 ,
         1.07069351,  1.05871703,  1.04131455,  1.01429141,  1.03422121,
         1.03868915,  1.0317903 ,  0.99715869,  0.99129001,  1.00249027]])
>>> Z_1 = brownian(x[:,0],N,dt,0.05+(0.7-0.05)/5,out=x[:,1:])
>>> Z_1
array([[ 0.98627307,  1.0122181 ,  1.11086437,  1.06934296,  1.17839341,
         1.20010557,  1.17479013,  1.23500555,  1.26148333,  1.19600166,
         1.15210544,  1.08157727,  1.13664597,  1.22198986,  1.06542751,
         1.01437067,  1.1046613 ,  1.17843062,  1.30843593,  1.22620402,
         1.28695086,  1.225874  ,  1.16937746,  1.24785249,  1.24031307,
         1.16415649,  1.22576466,  1.20223566,  1.21752876,  1.25332193,
         1.1852104 ,  1.14975599,  1.34705168,  1.46297354,  1.44370122,
         1.49531144,  1.64277641,  1.6284672 ,  1.60050765,  1.69196308,
         1.74127013,  1.70936835,  1.82069541,  1.66940147,  1.54331578,
         1.63883727,  1.68398992,  1.70808899,  1.80212812,  1.75435248],
       [ 1.09113533,  1.2636401 ,  1.270542  ,  1.35972171,  1.20789284,
         1.33511904,  1.28990177,  1.30485548,  1.26389118,  1.34737389,
         1.2865391 ,  1.27260662,  1.2384972 ,  1.283482  ,  1.33911719,
         1.3058525 ,  1.28840671,  1.37633867,  1.31746916,  1.19727953,
         1.0989056 ,  1.06107947,  0.99786223,  0.883124  ,  0.87374121,
         0.91266859,  0.85334711,  0.93856096,  0.91491277,  0.86220873,
         0.83777898,  0.68435075,  0.69742545,  0.74829773,  0.85528216,
         0.8836933 ,  0.81022589,  0.81477009,  0.8727781 ,  0.7976138 ,
         0.84900531,  0.97085198,  1.05165315,  0.97594042,  0.98156654,
         0.91152004,  0.8951165 ,  0.86780132,  0.81175829,  0.96316326]])
>>> len(Z_1)
2
>>> ncol(Z_1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ncol' is not defined
>>> numrows(Z_1[1])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'numrows' is not defined
>>> Z_1[1]
array([ 1.09113533,  1.2636401 ,  1.270542  ,  1.35972171,  1.20789284,
        1.33511904,  1.28990177,  1.30485548,  1.26389118,  1.34737389,
        1.2865391 ,  1.27260662,  1.2384972 ,  1.283482  ,  1.33911719,
        1.3058525 ,  1.28840671,  1.37633867,  1.31746916,  1.19727953,
        1.0989056 ,  1.06107947,  0.99786223,  0.883124  ,  0.87374121,
        0.91266859,  0.85334711,  0.93856096,  0.91491277,  0.86220873,
        0.83777898,  0.68435075,  0.69742545,  0.74829773,  0.85528216,
        0.8836933 ,  0.81022589,  0.81477009,  0.8727781 ,  0.7976138 ,
        0.84900531,  0.97085198,  1.05165315,  0.97594042,  0.98156654,
        0.91152004,  0.8951165 ,  0.86780132,  0.81175829,  0.96316326])
>>> Z_1[2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: index 2 is out of bounds for axis 0 with size 2
>>> Z_1[0]
array([ 0.98627307,  1.0122181 ,  1.11086437,  1.06934296,  1.17839341,
        1.20010557,  1.17479013,  1.23500555,  1.26148333,  1.19600166,
        1.15210544,  1.08157727,  1.13664597,  1.22198986,  1.06542751,
        1.01437067,  1.1046613 ,  1.17843062,  1.30843593,  1.22620402,
        1.28695086,  1.225874  ,  1.16937746,  1.24785249,  1.24031307,
        1.16415649,  1.22576466,  1.20223566,  1.21752876,  1.25332193,
        1.1852104 ,  1.14975599,  1.34705168,  1.46297354,  1.44370122,
        1.49531144,  1.64277641,  1.6284672 ,  1.60050765,  1.69196308,
        1.74127013,  1.70936835,  1.82069541,  1.66940147,  1.54331578,
        1.63883727,  1.68398992,  1.70808899,  1.80212812,  1.75435248])
>>> len(Z_1[2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: index 2 is out of bounds for axis 0 with size 2
>>> np.shape(Z_1)
(2, 50)
>>> np.linspace(1,50,50)
array([  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,  11.,
        12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,  21.,  22.,
        23.,  24.,  25.,  26.,  27.,  28.,  29.,  30.,  31.,  32.,  33.,
        34.,  35.,  36.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,  44.,
        45.,  46.,  47.,  48.,  49.,  50.])
>>> x=np.linspace(1,50,50);
>>> plot(Z_1,x)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'plot' is not defined
>>> plt.plot(Z_1,x)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/matplotlib/pyplot.py", line 2987, in plot
    ret = ax.plot(*args, **kwargs)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/matplotlib/axes.py", line 4137, in plot
    for line in self._get_lines(*args, **kwargs):
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/matplotlib/axes.py", line 317, in _grab_next_args
    for seg in self._plot_args(remaining, kwargs):
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/matplotlib/axes.py", line 295, in _plot_args
    x, y = self._xy_from_xy(x, y)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/matplotlib/axes.py", line 237, in _xy_from_xy
    raise ValueError("x and y must have same first dimension")
ValueError: x and y must have same first dimension
>>> Z_1[1]
array([ 1.09113533,  1.2636401 ,  1.270542  ,  1.35972171,  1.20789284,
        1.33511904,  1.28990177,  1.30485548,  1.26389118,  1.34737389,
        1.2865391 ,  1.27260662,  1.2384972 ,  1.283482  ,  1.33911719,
        1.3058525 ,  1.28840671,  1.37633867,  1.31746916,  1.19727953,
        1.0989056 ,  1.06107947,  0.99786223,  0.883124  ,  0.87374121,
        0.91266859,  0.85334711,  0.93856096,  0.91491277,  0.86220873,
        0.83777898,  0.68435075,  0.69742545,  0.74829773,  0.85528216,
        0.8836933 ,  0.81022589,  0.81477009,  0.8727781 ,  0.7976138 ,
        0.84900531,  0.97085198,  1.05165315,  0.97594042,  0.98156654,
        0.91152004,  0.8951165 ,  0.86780132,  0.81175829,  0.96316326])
>>> plt.plot(Z_1[1],x)
[<matplotlib.lines.Line2D object at 0x10a941310>]
>>> plt.show()
                
>>> 
>>> plt.plot(x,Z_1[x])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: arrays used as indices must be of integer (or boolean) type
>>> plt.plot(x,Z_1[1])
[<matplotlib.lines.Line2D object at 0x10f849350>]
>>> plt.show()
>>> plt.plot(x,Z_1[2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: index 2 is out of bounds for axis 0 with size 2
>>> plt.plot(x,Z_1[0])
[<matplotlib.lines.Line2D object at 0x10f9f5a50>]
>>> plt.show()
>>> x = np.empty((2,N+1))
>>> x[:,1:]
array([[ -0.00000000e+000,   2.51973479e-322,   1.15170939e-313,
          3.50977365e+064,   2.86047880e+004,   0.00000000e+000,
          4.94065646e-324,               nan,   0.00000000e+000,
          2.47032823e-323,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          1.75871011e-310,   3.50977866e+064,   0.00000000e+000,
          7.06200199e-311,               nan,               nan,
          3.50977942e+064,   6.95326642e-310,  -0.00000000e+000,
         -0.00000000e+000,  -9.33263619e-302,   1.88274989e-183,
          2.20563913e-314,   7.67956559e+218,   1.97626258e-323,
          1.97626258e-323,   0.00000000e+000,   8.32399253e-200,
          9.28521509e+194,   7.90505033e-323,   0.00000000e+000,
          2.42882671e-319,   6.95326642e-310,   0.00000000e+000,
          0.00000000e+000,               nan,   0.00000000e+000,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          3.47667790e-308,   6.67522012e-307],
       [  8.16179688e+002,   4.98375000e+002,   0.00000000e+000,
          0.00000000e+000,   2.86047880e+004,   3.35964639e-322,
          0.00000000e+000,   0.00000000e+000,   2.12199716e-314,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          6.95188130e-310,   0.00000000e+000,   0.00000000e+000,
         -0.00000000e+000,  -0.00000000e+000,   7.90505033e-323,
          1.15170939e-313,   8.28904655e-317,   2.86048118e+004,
          0.00000000e+000,   4.94065646e-324,   0.00000000e+000,
          0.00000000e+000,   2.47032823e-323,   0.00000000e+000,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   1.75871011e-310,   3.50977866e+064,
          0.00000000e+000,   7.06200199e-311,               nan,
                      nan,   3.50977942e+064,   9.19332133e-307,
         -0.00000000e+000,  -2.32036395e+077,   6.95188254e-310,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          3.11109942e+231,   1.05864805e-307]])
>>> x
array([[ -0.00000000e+000,  -0.00000000e+000,   2.51973479e-322,
          1.15170939e-313,   3.50977365e+064,   2.86047880e+004,
          0.00000000e+000,   4.94065646e-324,               nan,
          0.00000000e+000,   2.47032823e-323,   0.00000000e+000,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   1.75871011e-310,   3.50977866e+064,
          0.00000000e+000,   7.06200199e-311,               nan,
                      nan,   3.50977942e+064,   6.95326642e-310,
         -0.00000000e+000,  -0.00000000e+000,  -9.33263619e-302,
          1.88274989e-183,   2.20563913e-314,   7.67956559e+218,
          1.97626258e-323,   1.97626258e-323,   0.00000000e+000,
          8.32399253e-200,   9.28521509e+194,   7.90505033e-323,
          0.00000000e+000,   2.42882671e-319,   6.95326642e-310,
          0.00000000e+000,   0.00000000e+000,               nan,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   3.47667790e-308,   6.67522012e-307],
       [  2.47032823e-323,   8.16179688e+002,   4.98375000e+002,
          0.00000000e+000,   0.00000000e+000,   2.86047880e+004,
          3.35964639e-322,   0.00000000e+000,   0.00000000e+000,
          2.12199716e-314,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   6.95188130e-310,   0.00000000e+000,
          0.00000000e+000,  -0.00000000e+000,  -0.00000000e+000,
          7.90505033e-323,   1.15170939e-313,   8.28904655e-317,
          2.86048118e+004,   0.00000000e+000,   4.94065646e-324,
          0.00000000e+000,   0.00000000e+000,   2.47032823e-323,
          0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   0.00000000e+000,   1.75871011e-310,
          3.50977866e+064,   0.00000000e+000,   7.06200199e-311,
                      nan,               nan,   3.50977942e+064,
          9.19332133e-307,  -0.00000000e+000,  -2.32036395e+077,
          6.95188254e-310,   0.00000000e+000,   0.00000000e+000,
          0.00000000e+000,   3.11109942e+231,   1.05864805e-307]])
>>> x[:,0]
array([ -0.00000000e+000,   2.47032823e-323])
>>> x[1,0]
2.4703282292062327e-323
>>> x[0]
array([ -0.00000000e+000,  -0.00000000e+000,   2.51973479e-322,
         1.15170939e-313,   3.50977365e+064,   2.86047880e+004,
         0.00000000e+000,   4.94065646e-324,               nan,
         0.00000000e+000,   2.47032823e-323,   0.00000000e+000,
         0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
         0.00000000e+000,   1.75871011e-310,   3.50977866e+064,
         0.00000000e+000,   7.06200199e-311,               nan,
                     nan,   3.50977942e+064,   6.95326642e-310,
        -0.00000000e+000,  -0.00000000e+000,  -9.33263619e-302,
         1.88274989e-183,   2.20563913e-314,   7.67956559e+218,
         1.97626258e-323,   1.97626258e-323,   0.00000000e+000,
         8.32399253e-200,   9.28521509e+194,   7.90505033e-323,
         0.00000000e+000,   2.42882671e-319,   6.95326642e-310,
         0.00000000e+000,   0.00000000e+000,               nan,
         0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
         0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
         0.00000000e+000,   3.47667790e-308,   6.67522012e-307])
>>> x[1]
array([  2.47032823e-323,   8.16179688e+002,   4.98375000e+002,
         0.00000000e+000,   0.00000000e+000,   2.86047880e+004,
         3.35964639e-322,   0.00000000e+000,   0.00000000e+000,
         2.12199716e-314,   0.00000000e+000,   0.00000000e+000,
         0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
         0.00000000e+000,   6.95188130e-310,   0.00000000e+000,
         0.00000000e+000,  -0.00000000e+000,  -0.00000000e+000,
         7.90505033e-323,   1.15170939e-313,   8.28904655e-317,
         2.86048118e+004,   0.00000000e+000,   4.94065646e-324,
         0.00000000e+000,   0.00000000e+000,   2.47032823e-323,
         0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
         0.00000000e+000,   0.00000000e+000,   1.75871011e-310,
         3.50977866e+064,   0.00000000e+000,   7.06200199e-311,
                     nan,               nan,   3.50977942e+064,
         9.19332133e-307,  -0.00000000e+000,  -2.32036395e+077,
         6.95188254e-310,   0.00000000e+000,   0.00000000e+000,
         0.00000000e+000,   3.11109942e+231,   1.05864805e-307])
>>> Y_1 = np.shape(Z_1)
>>> Y_1
(2, 50)
>>> Y_1(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object is not callable
>>> Y_1[1]
50
>>> Z = brownian(x[:,0], N, dt, Y, out=x[:,1:])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Y' is not defined
>>> Z_3 = brownian(x[:,0], N, dt, 0.05, out=x[:,1:])
>>> XY_1 = np.shape(Z_3)
>>> XY_1
(2, 50)
>>> plt.plot(Z_3[1],linspace(1,XY_1[2],XY_1[2]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'linspace' is not defined
>>> plt.plot(Z_3[1],np.linspace(1,XY_1[2],XY_1[2]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>> np.linspace(1,XY_1[2],XY_1[2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>> np.linspace(1,XY_1[1],XY_1[1])
array([  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,  11.,
        12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,  21.,  22.,
        23.,  24.,  25.,  26.,  27.,  28.,  29.,  30.,  31.,  32.,  33.,
        34.,  35.,  36.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,  44.,
        45.,  46.,  47.,  48.,  49.,  50.])
>>> plt.plot(Z_3[1],np.linspace(1,XY_1[1],XY_1[1]))
[<matplotlib.lines.Line2D object at 0x10f80ac10>]
>>> plt.show()
>>> plt.plot(np.linspace(1,XY_1[1],XY_1[1]), Z_3[1])
[<matplotlib.lines.Line2D object at 0x10c1efad0>]
>>> plt.show()
>>> delta_array
array([ 0.05      ,  0.26666667,  0.48333333,  0.7       ])
>>> for Y in delta_array:"
  File "<stdin>", line 1
    for Y in delta_array:"
                         ^
SyntaxError: EOL while scanning string literal
>>> for Y in delta_array:
...     print(Y)
... 
0.05
0.266666666667
0.483333333333
0.7
>>> XY = np.shape(Z)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Z' is not defined
>>> XY = np.shape(Z_3)
>>> XY
(2, 50)
>>> Z_3
array([[-0.00761646, -0.05881311, -0.0705018 , -0.0432543 , -0.02781147,
        -0.03094801, -0.05850334, -0.07141888, -0.09284196, -0.08541823,
        -0.10572715, -0.16583238, -0.19414231, -0.21741815, -0.19619789,
        -0.20842472, -0.19727942, -0.20249198, -0.24878889, -0.22951831,
        -0.21551231, -0.19196536, -0.22829032, -0.20829607, -0.20628619,
        -0.2102391 , -0.19866213, -0.22090992, -0.24764969, -0.25442607,
        -0.27176094, -0.24554926, -0.19150824, -0.18355794, -0.2205475 ,
        -0.23694803, -0.22816085, -0.18062882, -0.19091469, -0.20593758,
        -0.24585254, -0.21408923, -0.20809443, -0.22448297, -0.24611158,
        -0.26955235, -0.30045812, -0.28470438, -0.27998759, -0.28513197],
       [ 0.02254071,  0.01848686,  0.02612954, -0.01322616, -0.02074767,
        -0.0414918 , -0.09723052, -0.08056988, -0.09058231, -0.09546384,
        -0.10788699, -0.1065216 , -0.14211044, -0.15454399, -0.14190585,
        -0.13563386, -0.19549285, -0.20539023, -0.17158411, -0.18901848,
        -0.18681487, -0.17508822, -0.17592259, -0.22178575, -0.22999927,
        -0.27875062, -0.3019125 , -0.26522355, -0.27493921, -0.29752937,
        -0.30360745, -0.33665668, -0.32823585, -0.28177531, -0.31282353,
        -0.30732261, -0.34300897, -0.34620544, -0.28999475, -0.32988946,
        -0.32241613, -0.33842273, -0.32930241, -0.30512151, -0.32207331,
        -0.30898929, -0.31990443, -0.31824648, -0.29546576, -0.33788848]])
>>> Z_3[1]
array([ 0.02254071,  0.01848686,  0.02612954, -0.01322616, -0.02074767,
       -0.0414918 , -0.09723052, -0.08056988, -0.09058231, -0.09546384,
       -0.10788699, -0.1065216 , -0.14211044, -0.15454399, -0.14190585,
       -0.13563386, -0.19549285, -0.20539023, -0.17158411, -0.18901848,
       -0.18681487, -0.17508822, -0.17592259, -0.22178575, -0.22999927,
       -0.27875062, -0.3019125 , -0.26522355, -0.27493921, -0.29752937,
       -0.30360745, -0.33665668, -0.32823585, -0.28177531, -0.31282353,
       -0.30732261, -0.34300897, -0.34620544, -0.28999475, -0.32988946,
       -0.32241613, -0.33842273, -0.32930241, -0.30512151, -0.32207331,
       -0.30898929, -0.31990443, -0.31824648, -0.29546576, -0.33788848])
>>> Z_3[2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: index 2 is out of bounds for axis 0 with size 2
>>> Z_3[0]
array([-0.00761646, -0.05881311, -0.0705018 , -0.0432543 , -0.02781147,
       -0.03094801, -0.05850334, -0.07141888, -0.09284196, -0.08541823,
       -0.10572715, -0.16583238, -0.19414231, -0.21741815, -0.19619789,
       -0.20842472, -0.19727942, -0.20249198, -0.24878889, -0.22951831,
       -0.21551231, -0.19196536, -0.22829032, -0.20829607, -0.20628619,
       -0.2102391 , -0.19866213, -0.22090992, -0.24764969, -0.25442607,
       -0.27176094, -0.24554926, -0.19150824, -0.18355794, -0.2205475 ,
       -0.23694803, -0.22816085, -0.18062882, -0.19091469, -0.20593758,
       -0.24585254, -0.21408923, -0.20809443, -0.22448297, -0.24611158,
       -0.26955235, -0.30045812, -0.28470438, -0.27998759, -0.28513197])
>>> x[:,0]
array([ -0.00000000e+000,   2.47032823e-323])
>>> x
array([[ -0.00000000e+000,  -7.61646102e-003,  -5.88131090e-002,
         -7.05017962e-002,  -4.32542989e-002,  -2.78114677e-002,
         -3.09480060e-002,  -5.85033424e-002,  -7.14188778e-002,
         -9.28419585e-002,  -8.54182278e-002,  -1.05727152e-001,
         -1.65832377e-001,  -1.94142305e-001,  -2.17418153e-001,
         -1.96197892e-001,  -2.08424721e-001,  -1.97279424e-001,
         -2.02491976e-001,  -2.48788893e-001,  -2.29518312e-001,
         -2.15512312e-001,  -1.91965356e-001,  -2.28290324e-001,
         -2.08296069e-001,  -2.06286193e-001,  -2.10239103e-001,
         -1.98662128e-001,  -2.20909916e-001,  -2.47649686e-001,
         -2.54426075e-001,  -2.71760944e-001,  -2.45549260e-001,
         -1.91508241e-001,  -1.83557940e-001,  -2.20547499e-001,
         -2.36948027e-001,  -2.28160847e-001,  -1.80628815e-001,
         -1.90914686e-001,  -2.05937582e-001,  -2.45852536e-001,
         -2.14089235e-001,  -2.08094430e-001,  -2.24482974e-001,
         -2.46111577e-001,  -2.69552347e-001,  -3.00458119e-001,
         -2.84704385e-001,  -2.79987592e-001,  -2.85131972e-001],
       [  2.47032823e-323,   2.25407065e-002,   1.84868559e-002,
          2.61295441e-002,  -1.32261590e-002,  -2.07476679e-002,
         -4.14918016e-002,  -9.72305174e-002,  -8.05698776e-002,
         -9.05823123e-002,  -9.54638387e-002,  -1.07886989e-001,
         -1.06521602e-001,  -1.42110439e-001,  -1.54543993e-001,
         -1.41905850e-001,  -1.35633863e-001,  -1.95492849e-001,
         -2.05390231e-001,  -1.71584115e-001,  -1.89018481e-001,
         -1.86814867e-001,  -1.75088217e-001,  -1.75922591e-001,
         -2.21785753e-001,  -2.29999271e-001,  -2.78750615e-001,
         -3.01912503e-001,  -2.65223552e-001,  -2.74939215e-001,
         -2.97529374e-001,  -3.03607447e-001,  -3.36656682e-001,
         -3.28235846e-001,  -2.81775306e-001,  -3.12823529e-001,
         -3.07322606e-001,  -3.43008966e-001,  -3.46205439e-001,
         -2.89994748e-001,  -3.29889457e-001,  -3.22416127e-001,
         -3.38422731e-001,  -3.29302410e-001,  -3.05121512e-001,
         -3.22073305e-001,  -3.08989288e-001,  -3.19904434e-001,
         -3.18246476e-001,  -2.95465759e-001,  -3.37888481e-001]])
>>> Z_3
array([[-0.00761646, -0.05881311, -0.0705018 , -0.0432543 , -0.02781147,
        -0.03094801, -0.05850334, -0.07141888, -0.09284196, -0.08541823,
        -0.10572715, -0.16583238, -0.19414231, -0.21741815, -0.19619789,
        -0.20842472, -0.19727942, -0.20249198, -0.24878889, -0.22951831,
        -0.21551231, -0.19196536, -0.22829032, -0.20829607, -0.20628619,
        -0.2102391 , -0.19866213, -0.22090992, -0.24764969, -0.25442607,
        -0.27176094, -0.24554926, -0.19150824, -0.18355794, -0.2205475 ,
        -0.23694803, -0.22816085, -0.18062882, -0.19091469, -0.20593758,
        -0.24585254, -0.21408923, -0.20809443, -0.22448297, -0.24611158,
        -0.26955235, -0.30045812, -0.28470438, -0.27998759, -0.28513197],
       [ 0.02254071,  0.01848686,  0.02612954, -0.01322616, -0.02074767,
        -0.0414918 , -0.09723052, -0.08056988, -0.09058231, -0.09546384,
        -0.10788699, -0.1065216 , -0.14211044, -0.15454399, -0.14190585,
        -0.13563386, -0.19549285, -0.20539023, -0.17158411, -0.18901848,
        -0.18681487, -0.17508822, -0.17592259, -0.22178575, -0.22999927,
        -0.27875062, -0.3019125 , -0.26522355, -0.27493921, -0.29752937,
        -0.30360745, -0.33665668, -0.32823585, -0.28177531, -0.31282353,
        -0.30732261, -0.34300897, -0.34620544, -0.28999475, -0.32988946,
        -0.32241613, -0.33842273, -0.32930241, -0.30512151, -0.32207331,
        -0.30898929, -0.31990443, -0.31824648, -0.29546576, -0.33788848]])
>>> Z_3 = brownian(x[:,0], N, dt, 0.1, out=x[:,1:])
>>> Z_3
array([[-0.04127697, -0.07214929, -0.0679416 , -0.03811837, -0.03624215,
        -0.0192525 , -0.02928221, -0.079481  , -0.05195621, -0.04992207,
        -0.12582798, -0.122975  , -0.10510112, -0.12628935, -0.11877934,
        -0.14674782, -0.14600764, -0.11488688, -0.09253447,  0.01317347,
         0.00239135, -0.03801891, -0.05338796, -0.1969694 , -0.1728071 ,
        -0.15835313, -0.20213516, -0.25469747, -0.30122318, -0.31460823,
        -0.35235821, -0.27161795, -0.31256957, -0.30718743, -0.32728783,
        -0.25304865, -0.28223751, -0.26190468, -0.30901321, -0.37421879,
        -0.41579752, -0.44219294, -0.40887472, -0.4136884 , -0.45322945,
        -0.4075935 , -0.43954188, -0.4968152 , -0.55463652, -0.66109038],
       [-0.0536544 , -0.0744912 , -0.08485708, -0.05945097, -0.06126413,
        -0.1051346 , -0.07229751, -0.08198318, -0.13181305, -0.15971959,
        -0.17724563, -0.19725541, -0.18645914, -0.24027225, -0.16019608,
        -0.23605322, -0.2164899 , -0.22721709, -0.26299368, -0.23361786,
        -0.22854232, -0.17672756, -0.20622829, -0.22959778, -0.30396954,
        -0.2490482 , -0.25997819, -0.2033155 , -0.27334386, -0.28605712,
        -0.23174158, -0.19907315, -0.30052669, -0.27587718, -0.28270711,
        -0.26762409, -0.31457809, -0.30701571, -0.37279365, -0.37991484,
        -0.36093515, -0.32359   , -0.30022029, -0.3258637 , -0.33332148,
        -0.25374384, -0.16465177, -0.21139735, -0.21985934, -0.08817897]])
>>> fig, ax = plt.subplots(1,2, squeeze = False) 
>>> ax[0][1].plot(Z_3[1],np.linspace(1,np.shape(Z_3[1]), np.shape(Z_3[1]))
... ax[0][2].plot(Z_3[2],np.linspace(1,np.shape(Z_3[2]), np.shape(Z_3[2]))
  File "<stdin>", line 2
    ax[0][2].plot(Z_3[2],np.linspace(1,np.shape(Z_3[2]), np.shape(Z_3[2]))
     ^
SyntaxError: invalid syntax
>>> plt.plot(Z_3[1], np.linspace(1,np.shape(Z_3[1]),np.shape(Z_3[1]))
... 
... plt.show()
  File "<stdin>", line 3
    plt.show()
      ^
SyntaxError: invalid syntax
>>> close()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'close' is not defined
>>> 
